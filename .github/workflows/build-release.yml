name: 🚀 Build and Release ChzzkStreamDeck

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# GitHub Actions 권한 설정
permissions:
  contents: write  # 릴리스 생성을 위한 쓰기 권한
  packages: write  # 패키지 업로드 권한
  actions: read    # 액션 읽기 권한

env:
  PYTHON_VERSION: '3.13.3'
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1

jobs:
  # 버전 관리
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📋 버전 계산
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # 태그가 있으면 태그 버전 사용
            VERSION=${GITHUB_REF#refs/tags/}
            IS_RELEASE=true
          else
            # 태그가 없으면 커밋 해시로 pre-release 버전 생성
            SHORT_SHA=${GITHUB_SHA::7}
            COMMIT_COUNT=$(git rev-list --count HEAD)
            VERSION="v0.1.${COMMIT_COUNT}-${SHORT_SHA}"
            IS_RELEASE=false
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
          echo "📝 버전: $VERSION (Release: $IS_RELEASE)"

  # Windows 빌드
  build-windows:
    needs: version
    runs-on: windows-latest
    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Python 설정
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: 🔧 빌드 설정 생성 (자동)
        run: |
          python -c "
          from build_config import BuildConfig
          import json
          
          # 기본 포트로 자동 설정
          config = BuildConfig()
          config.config['server']['port'] = 8080
          config.config['modules']['spotify']['redirect_uri'] = 'http://localhost:8080/spotify/callback'
          
          with open('config_build.json', 'w', encoding='utf-8') as f:
              json.dump(config.config, f, indent=2, ensure_ascii=False)
          
          print('Build config generated successfully')
          "
      
      - name: 🔨 Windows 실행 파일 빌드
        run: |
          pyinstaller --clean --noconfirm --onedir main.py --name ChzzkStreamDeck --distpath dist-windows --workpath build-windows --add-data "neon;neon" --add-data "purple;purple" --add-data "main;main" --add-data "requirements.txt;." --add-data "config_build.json;." --add-data "README.md;." --add-data "check_system.py;." --hidden-import websockets --hidden-import websockets.legacy --hidden-import websockets.legacy.server --hidden-import aiohttp --hidden-import aiohttp.web --hidden-import aiohttp.client --hidden-import requests --hidden-import requests.adapters --hidden-import requests.auth --hidden-import urllib3 --hidden-import certifi --hidden-import pywebview --hidden-import pywebview.platforms --hidden-import pywebview.platforms.winforms --hidden-import pywebview.platforms.cef --hidden-import psutil --hidden-import http.server --hidden-import http.client --hidden-import http.cookies --hidden-import http.cookiejar --hidden-import socketserver --hidden-import urllib.parse --hidden-import urllib.request --hidden-import urllib.error --hidden-import json --hidden-import webbrowser --hidden-import base64 --hidden-import platform --hidden-import subprocess --hidden-import signal --hidden-import atexit --hidden-import importlib --hidden-import importlib.util --hidden-import datetime --hidden-import threading --hidden-import time --hidden-import logging --hidden-import logging.handlers --hidden-import asyncio --hidden-import asyncio.events --hidden-import asyncio.queues --hidden-import pathlib --hidden-import typing --hidden-import ssl --hidden-import socket --hidden-import select --hidden-import email --hidden-import email.mime --hidden-import email.mime.text --hidden-import hashlib --hidden-import hmac --hidden-import secrets --hidden-import uuid --hidden-import mimetypes --hidden-import shutil --hidden-import tempfile --hidden-import glob --hidden-import fnmatch --hidden-import re --hidden-import string --hidden-import collections --hidden-import collections.abc --hidden-import queue --hidden-import io --hidden-import codecs --hidden-import encodings --hidden-import encodings.utf_8 --hidden-import encodings.cp1252 --collect-all websockets --collect-all aiohttp --collect-all http --collect-all urllib --collect-all datetime --collect-all asyncio --collect-all logging --collect-all email --exclude-module matplotlib --exclude-module numpy --exclude-module pandas --exclude-module scipy --exclude-module tkinter --exclude-module PIL --exclude-module cv2 --exclude-module torch --exclude-module tensorflow --exclude-module IPython --exclude-module jupyter
      
      - name: 📦 Windows 릴리스 패키지 생성
        run: |
          mkdir release-windows
          
          # Copy all files from build directory using PowerShell
          Copy-Item -Path "dist-windows\ChzzkStreamDeck\*" -Destination "release-windows" -Recurse -Force
          
          # Copy additional files
          if (Test-Path "config_build.json") { Copy-Item "config_build.json" "release-windows\" }
          if (Test-Path "README.md") { Copy-Item "README.md" "release-windows\" }
          if (Test-Path "check_system.py") { Copy-Item "check_system.py" "release-windows\" }
          
          Write-Output "✅ Windows release package created successfully"
          
          @"
          # ChzzkStreamDeck Windows Usage Guide
          
          ## How to Run
          1. Extract the zip file to a folder
          2. Double-click ChzzkStreamDeck.exe in the extracted folder
          3. If Windows Defender warns, click More info -> Run anyway
          4. Admin panel will open automatically in your browser
          
          ## Important Notes
          - Keep ALL files in the same folder (do not move ChzzkStreamDeck.exe alone)
          - The app includes all dependencies - no Python installation required
          - First startup may take 10-15 seconds (creating necessary files)
          
          ## System Requirements
          - Windows 10/11 (64-bit)
          - 4GB RAM minimum, 8GB recommended
          - Internet connection for Spotify/Chzzk features
          - 500MB free disk space
          
          ## Troubleshooting
          - If app doesn't start: Run as administrator
          - If Windows Defender blocks: Add folder to exclusions
          - If port conflict: Use --port 8081 argument
          - If slow startup: Be patient on first run (normal behavior)
          "@ | Out-File -FilePath "release-windows\USER_GUIDE.md" -Encoding UTF8
      
      - name: 📤 Windows 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: ChzzkStreamDeck-Windows-${{ needs.version.outputs.version }}
          path: release-windows/

  # Linux 빌드
  build-linux:
    needs: version
    runs-on: ubuntu-latest
    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Python 설정
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: 🔧 빌드 설정 생성 (자동)
        run: |
          python3 -c "
          from build_config import BuildConfig
          import json
          
          config = BuildConfig()
          config.config['server']['port'] = 8080
          config.config['modules']['spotify']['redirect_uri'] = 'http://localhost:8080/spotify/callback'
          
          with open('config_build.json', 'w', encoding='utf-8') as f:
              json.dump(config.config, f, indent=2, ensure_ascii=False)
          
          print('Build config generated successfully')
          "
      
      - name: 🔨 Linux 실행 파일 빌드
        run: |
          pyinstaller --clean --noconfirm --onedir main.py --name ChzzkStreamDeck \
            --distpath dist-linux \
            --workpath build-linux \
            --add-data "neon:neon" \
            --add-data "purple:purple" \
            --add-data "main:main" \
            --add-data "requirements.txt:." \
            --add-data "config_build.json:." \
            --add-data "README.md:." \
            --add-data "check_system.py:." \
            --hidden-import websockets \
            --hidden-import websockets.legacy \
            --hidden-import websockets.legacy.server \
            --hidden-import aiohttp \
            --hidden-import aiohttp.web \
            --hidden-import aiohttp.client \
            --hidden-import requests \
            --hidden-import requests.adapters \
            --hidden-import requests.auth \
            --hidden-import urllib3 \
            --hidden-import certifi \
            --hidden-import pywebview \
            --hidden-import pywebview.platforms \
            --hidden-import pywebview.platforms.gtk \
            --hidden-import pywebview.platforms.qt \
            --hidden-import psutil \
            --hidden-import http.server \
            --hidden-import http.client \
            --hidden-import http.cookies \
            --hidden-import http.cookiejar \
            --hidden-import socketserver \
            --hidden-import urllib.parse \
            --hidden-import urllib.request \
            --hidden-import urllib.error \
            --hidden-import json \
            --hidden-import webbrowser \
            --hidden-import base64 \
            --hidden-import platform \
            --hidden-import subprocess \
            --hidden-import signal \
            --hidden-import atexit \
            --hidden-import importlib \
            --hidden-import importlib.util \
            --hidden-import datetime \
            --hidden-import threading \
            --hidden-import time \
            --hidden-import logging \
            --hidden-import logging.handlers \
            --hidden-import asyncio \
            --hidden-import asyncio.events \
            --hidden-import asyncio.queues \
            --hidden-import pathlib \
            --hidden-import typing \
            --hidden-import ssl \
            --hidden-import socket \
            --hidden-import select \
            --hidden-import email \
            --hidden-import email.mime \
            --hidden-import email.mime.text \
            --hidden-import hashlib \
            --hidden-import hmac \
            --hidden-import secrets \
            --hidden-import uuid \
            --hidden-import mimetypes \
            --hidden-import shutil \
            --hidden-import tempfile \
            --hidden-import glob \
            --hidden-import fnmatch \
            --hidden-import re \
            --hidden-import string \
            --hidden-import collections \
            --hidden-import collections.abc \
            --hidden-import queue \
            --hidden-import io \
            --hidden-import codecs \
            --hidden-import encodings \
            --hidden-import encodings.utf_8 \
            --collect-all websockets \
            --collect-all aiohttp \
            --collect-all http \
            --collect-all urllib \
            --collect-all datetime \
            --collect-all asyncio \
            --collect-all logging \
            --collect-all email \
            --exclude-module matplotlib \
            --exclude-module numpy \
            --exclude-module pandas \
            --exclude-module scipy \
            --exclude-module tkinter \
            --exclude-module PIL \
            --exclude-module cv2 \
            --exclude-module torch \
            --exclude-module tensorflow \
            --exclude-module IPython \
            --exclude-module jupyter
      
      - name: 📦 Linux 릴리스 패키지 생성
        run: |
          mkdir release-linux
          cp -r dist-linux/ChzzkStreamDeck/* release-linux/
          cp config_build.json release-linux/ || echo "config_build.json not found"
          cp README.md release-linux/ || echo "README.md not found"
          cp check_system.py release-linux/ || echo "check_system.py not found"
          chmod +x release-linux/ChzzkStreamDeck
          
          # 실행 스크립트 생성
          cat > release-linux/run.sh << 'EOF'
          #!/bin/bash
          echo "ChzzkStreamDeck starting..."
          ./ChzzkStreamDeck
          EOF
          chmod +x release-linux/run.sh
      
      - name: 📤 Linux 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: ChzzkStreamDeck-Linux-${{ needs.version.outputs.version }}
          path: release-linux/

  # 릴리스 생성
  release:
    needs: [version, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: 📥 모든 아티팩트 다운로드
        uses: actions/download-artifact@v4
      
      - name: 📦 릴리스 압축 파일 생성
        run: |
          # Windows 릴리스
          cd "ChzzkStreamDeck-Windows-${{ needs.version.outputs.version }}"
          zip -r "../ChzzkStreamDeck-Windows-${{ needs.version.outputs.version }}.zip" .
          cd ..
          
          # Linux 릴리스
          cd "ChzzkStreamDeck-Linux-${{ needs.version.outputs.version }}"
          tar -czf "../ChzzkStreamDeck-Linux-${{ needs.version.outputs.version }}.tar.gz" .
          cd ..
      
      - name: 🏷️ GitHub 릴리스 생성
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version.outputs.version }}
          name: "ChzzkStreamDeck ${{ needs.version.outputs.version }}"
          body: |
            # 🎮 ChzzkStreamDeck ${{ needs.version.outputs.version }}
            
            ## 🆕 새로운 기능
            - 치지직 채팅 오버레이
            - Spotify 음악 정보 오버레이  
            - 네온/퍼플 테마 지원
            - 포트 선택 가능
            - 완전한 종료 시스템
            
            ## 📦 다운로드
            - **Windows**: ChzzkStreamDeck-Windows-${{ needs.version.outputs.version }}.zip
            - **Linux**: ChzzkStreamDeck-Linux-${{ needs.version.outputs.version }}.tar.gz
            
            ## 🔧 설치 및 사용법
            1. 해당 OS용 파일 다운로드
            2. 압축 해제
            3. 실행 파일 실행
            4. 관리패널에서 설정 입력
            
            ## ⚠️ 주의사항
            - 첫 실행 시 방화벽/보안 프로그램에서 허용 필요
            - Spotify 사용 시 개발자 앱 등록 필요
            
            ---
            **빌드 정보**: ${{ github.sha }}
          draft: ${{ needs.version.outputs.is_release == 'false' }}
          prerelease: ${{ needs.version.outputs.is_release == 'false' }}
          make_latest: ${{ needs.version.outputs.is_release == 'true' }}
          generate_release_notes: true
          files: |
            ChzzkStreamDeck-Windows-${{ needs.version.outputs.version }}.zip
            ChzzkStreamDeck-Linux-${{ needs.version.outputs.version }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 